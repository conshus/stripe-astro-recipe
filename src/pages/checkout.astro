---
//use nanostores as a shopping cart so that I can fill out the line items
// will also need to get address to be able to use easypost to get rates and pass into Stripe: https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=embedded-form&dashboard-or-api=api&lang=node#create-checkout-session
// this maybe closer to what I'm looking for: https://docs.stripe.com/payments/checkout/custom-shipping-options?payment-ui=embedded-form&lang=node&server-lang=node with this https://docs.easypost.com/docs/shipments/rates?lang=javascript#retrieve-rates-for-a-shipment and verify address
import Stripe from "stripe";

const PUBLIC_STRIPE_KEY = import.meta.env.PUBLIC_STRIPE_KEY;
const stripe = new Stripe(import.meta.env.STRIPE_KEY);
const { origin, searchParams } = Astro.url;
// const paramsString = window.location.search;
console.log("Astro.request: ", Astro.request);
console.log("searchParams: ", searchParams);
let line_items = [];
searchParams.forEach((value, key) => {
  // console.log(value, key);
  // console.log("key.slice(-1): ", key.slice(-1));
  // console.log(
  //   "key.substring(0, key.length-1): ",
  //   key.substring(0, key.length - 1)
  // );
  // line_items[key.slice(-1)][key.substring(0, key.length - 1)] = value;
  // 1. Extract the index number (convert to integer)
  const index = parseInt(key.slice(-1), 10);

  // 2. Extract the property name ('price' or 'quantity')
  const propertyName = key.substring(0, key.length - 1);

  // 3. Ensure the object at this index exists
  if (!line_items[index]) {
    line_items[index] = {}; // If it doesn't exist, create an empty object
  }

  // 4. Assign the value to the correct property on the object
  //    Convert quantity to a number
  if (propertyName === "quantity") {
    line_items[index][propertyName] = parseInt(value, 10); // Convert quantity string to number
  } else {
    line_items[index][propertyName] = value; // Price remains a string
  }
});

console.log("line_items: ", line_items);

// The line_items array might have empty slots if indices weren't sequential,
// although in your example they are. Filtering ensures a clean array.
const final_line_items = line_items.filter(
  (item) => item !== undefined && item !== null
);

const session = await stripe.checkout.sessions.create({
  ui_mode: "embedded",
  mode: "payment",
  permissions: {
    update_shipping_details: "server_only",
  },
  shipping_address_collection: {
    allowed_countries: ["US"],
  },
  shipping_options: [
    {
      shipping_rate_data: {
        type: "fixed_amount",
        display_name: "Dummy shipping",
        fixed_amount: {
          amount: 0,
          currency: "usd",
        },
      },
    },
  ],
  line_items: final_line_items,
  // line_items: [
  //   {
  //     price: "price_1RC2xVAJJ4GWZRKauTMTBvWI",
  //     quantity: 1,
  //   },
  // ],
  return_url: `${origin}/return?session_id={CHECKOUT_SESSION_ID}`,
  // return_url:
  //   "https://stripeastrorecipe-cpdu--4321--83e74fed.local-credentialless.webcontainer.io/return?session_id={CHECKOUT_SESSION_ID}",
  automatic_tax: { enabled: true },
});
// console.log("session: ", session);S
---

<div
  id="checkout"
  data-stripe-key={PUBLIC_STRIPE_KEY}
  data-client-secret={session.client_secret}
>
  <!-- Checkout will insert the payment form here -->
</div>

<script>
  import { loadStripe } from "@stripe/stripe-js";
  const checkoutDiv = document.querySelector("#checkout");
  const { clientSecret, stripeKey } = checkoutDiv.dataset;

  const stripe = await loadStripe(stripeKey);
  const parcel_details = {
    length: 13,
    width: 13,
    height: 4,
    weight: 65.9,
  };

  // Call your backend to set shipping options
  const onShippingDetailsChange = async (shippingDetailsChangeEvent) => {
    console.log("shippingDetailsChangeEvent: ", shippingDetailsChangeEvent);
    const { checkoutSessionId, shippingDetails } = shippingDetailsChangeEvent;
    const response = await fetch("/calculate-shipping-options", {
      method: "POST",
      body: JSON.stringify({
        checkout_session_id: checkoutSessionId,
        shipping_details: shippingDetails,
        parcel_details,
      }),
    });
    console.log("response: ", response);
    const data = await response.json();
    if (data.type === "error") {
      console.log("data error: ", data);
      return Promise.resolve({
        type: "reject",
        errorMessage: data.message,
      });
    } else {
      console.log("response success: ", response);
      return Promise.resolve({ type: "accept" });
    }
  };

  const checkout = await stripe.initEmbeddedCheckout({
    fetchClientSecret: () => clientSecret,
    onShippingDetailsChange,
  });

  // Mount Checkout
  checkout.mount("#checkout");
</script>
