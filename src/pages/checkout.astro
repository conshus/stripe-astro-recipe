---
//use nanostores as a shopping cart so that I can fill out the line items
// will also need to get address to be able to use easypost to get rates and pass into Stripe: https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=embedded-form&dashboard-or-api=api&lang=node#create-checkout-session
// this maybe closer to what I'm looking for: https://docs.stripe.com/payments/checkout/custom-shipping-options?payment-ui=embedded-form&lang=node&server-lang=node with this https://docs.easypost.com/docs/shipments/rates?lang=javascript#retrieve-rates-for-a-shipment and verify address
import Stripe from 'stripe'

const PUBLIC_STRIPE_KEY = import.meta.env.PUBLIC_STRIPE_KEY
const stripe = new Stripe(import.meta.env.STRIPE_KEY)
const { origin } = Astro.url
const session = await stripe.checkout.sessions.create({
  ui_mode: 'embedded',
  mode: 'payment',
  permissions: {
    update_shipping_details: 'server_only',
  },
  shipping_address_collection: {
    allowed_countries: ['US'],
  },
  shipping_options: [
    {
      shipping_rate_data: {
        type: 'fixed_amount',
        display_name: 'Dummy shipping',
        fixed_amount: {
          amount: 0,
          currency: 'usd',
        },
      },
    },
  ],
  line_items: [
    {
      price: 'price_1RC2xVAJJ4GWZRKauTMTBvWI',
      quantity: 1,
    },
  ],
  // return_url: `${origin}/return?session_id={CHECKOUT_SESSION_ID}`,
  return_url: "https://stripeastrorecipe-cpdu--4321--83e74fed.local-credentialless.webcontainer.io/return?session_id={CHECKOUT_SESSION_ID}",
  automatic_tax: { enabled: true },
})
// console.log("session: ", session);S
---

<div id="checkout" data-stripe-key={PUBLIC_STRIPE_KEY} data-client-secret={session.client_secret}>
  <!-- Checkout will insert the payment form here -->
</div>

<script>
  import { loadStripe } from '@stripe/stripe-js';
  const checkoutDiv = document.querySelector('#checkout')
  const {clientSecret, stripeKey} = checkoutDiv.dataset

  const stripe = await loadStripe(stripeKey);

  // Call your backend to set shipping options
  const onShippingDetailsChange = async (shippingDetailsChangeEvent) => {
    console.log("shippingDetailsChangeEvent: ",shippingDetailsChangeEvent);
    const {checkoutSessionId, shippingDetails} = shippingDetailsChangeEvent;
    const response = await fetch("/calculate-shipping-options", {
      method: "POST",
      body: JSON.stringify({
        checkout_session_id: checkoutSessionId,
        shipping_details: shippingDetails,
      })
    })
    console.log("response: ", response);
    if (response.type === 'error') {
      console.log("response error: ", response);
      return Promise.resolve({type: "reject", errorMessage: response.message});
    } else {
      console.log("response success: ", response);
      return Promise.resolve({type: "accept"});
    }
  };


  const checkout = await stripe.initEmbeddedCheckout({
    fetchClientSecret: () => clientSecret,
    onShippingDetailsChange,
  });

  // Mount Checkout
  checkout.mount('#checkout');
</script>